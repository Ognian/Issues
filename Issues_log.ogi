create package.json with content {}

npm install github-api --save


OK tried github-api --> newest version not with npm -> ok downloaded from github
--> BAD doesn't support pagination with issues and issues do not include comments....
 --> comments need to be fetched separate...


Trying
https://github.com/mikedeboer/node-github
==========================================
(from ajax.org -> cloud9 ide)

 npm install github --save

This is much better...

// see http://mikedeboer.github.io/node-github/#issues.prototype.getAll issues
// and
// http://developer.github.com/v3/issues/#list-issues-for-a-repository

this gets all Issues

//github.issues.getAll(
//    {
////        filter: "created",
//        filter: "all",
////        state: "open",
////        labels: "",
////        sort: "updated",
////        direction: "asc"
//        per_page: 1
//    },
//    function (err, res) {
//        //res is an array containing the issues but also has a meta field...
//
//        function getMore(r){
//            if(github.hasNextPage(r)){
//                github.getNextPage(r, function (err, res) {
//                    doWithIssues(res);
//                    getMore(res);
//                });
//            };
//        };
//
//        doWithIssues(res);
//        getMore(res); //if there are a lot of pages recursion may get quite deep
//
//
//
//    }
//);



repoIssues same for only one repo...


There are issues and comments
we shall dump them in different files
TODO How are both linked???



------------------------------

How to publish to npm as a dev
https://gist.github.com/coolaj86/1318304

and

http://stackoverflow.com/questions/13507763/do-i-need-to-publish-to-npm-every-time-i-update-a-package-available-via-git


28.10.2013 ogi

//github.issues.repoComments(
//    {
//        repo: "test",
//        user: "Ognian",
////        sort: "updated",
////        direction: "asc"
//        per_page: 1 //TODO change to 100
//    },
//    function (err, res) {
//        //res is an array containing the issues but also has a meta field...
//
//        function doWithComments(commentArray) {
//            console.log("a comment:" + JSON.stringify(commentArray, undefined, 2));
//        }
//
//        function getMoreC(r) {
//            if (github.hasNextPage(r)) {
//                github.getNextPage(r, function (err, res) {
//                    doWithComments(res);
//                    getMoreC(res);
//                });
//            }
//
//        }
//
//        doWithComments(res);
//        getMoreC(res); //if there are a lot of pages recursion may get quite deep
//
//
//    }
//);

works good but we need the comments inside the Issues...

29.10.2013 ogi

http://sgmonda.github.io/stdio/
could be used for cmd line ....

30.10.2013 ogi

print to pdf and open in preview works with:
Safari
the very latest chrome canaray (DOWNLOADED TODAY)
;-)


    /*@page {*/
    /*@top-center {*/
    /*content: element(pageHeader);*/
    /*}*/
    /*}*/
    /*#pageHeader{*/
    /*position: running(pageHeader);*/
    /*}*/


31.10.2013 ogi

installed prince looks like the only one supporting css paged media yet (next will be webkit)
see http://www.princexml.com/doc/9.0/#paged
 prince http://localhost:63342/Issues/public/printtest.html -o printtest.pdf
OK!

npm install stdio --save

6.11.2013 ogi

 npm install express --save

node_modules/express/bin/express -H report
generates the report app

npm rm express

cd report
npm install

OK

spec:
http://mustache.github.io/mustache.5.html


http://stackoverflow.com/questions/16586705/configuring-v8s-memory-management-to-be-smart-for-a-node-js-process

7.11.2013 ogi

sudo npm install doxx -g

OK
doxx --source report -i node_modules,views --target report_docs

TODO --> make separate template
TODO --> run for root dir...

LETS TRY DUST.JS now (switching from hogan.js hjs (twitter) to dustjs (linkedin))
npm install dustjs-linkedin  --save
npm http GET https://registry.npmjs.org/dustjs-linkedin
npm http 304 https://registry.npmjs.org/dustjs-linkedin
npm http GET https://registry.npmjs.org/dustjs-linkedin/-/dustjs-linkedin-2.2.0.tgz
npm http 200 https://registry.npmjs.org/dustjs-linkedin/-/dustjs-linkedin-2.2.0.tgz
npm ERR! Error: shasum check failed for /var/folders/p6/vn3fc5rx21n9hh3h_f3b6b380000gn/T/npm-35433-xc6Dg9KB/1384100229356-0.31653884798288345/tmp.tgz
npm ERR! Expected: a459d763e187840ac49f6a10303b9993c71e361f
npm ERR! Actual:   16fc61261150113bbc8202bb95dfa8e716a296dd

npm cache clean
npm install dustjs-linkedin  --save
--> OK!!
 npm install dustjs-helpers  --save

OK
so since the official dustjs repo is dustjs-linkedin
they point to the express demo
https://github.com/chovy/express-template-demo

so the link between dust amd express is for now via consolidate
https://github.com/visionmedia/consolidate.js/


 npm rm hjs  --save
 WOW this works...

10.11.2013 ogi

try to get many issues:
joyent / node

node getGHIssues.js -a Ognian xxxx -r joyent node

we got some:
ERROR {"message":"API rate limit exceeded for Ognian.","documentation_url":"http://developer.github.com/v3/#rate-limiting"}

and reendering the gravatar is also a bad idea... --> removed

OK let's see how many issues we are able to download before hitting the API rate limit...
The only thing we can do if this is too low is to contact github...

looks like there have been 6305 issues in joyent/node
and I got 5807 pages not issues --> 0..4949 ==> 4950 issues !!!
I've got 106 errors hitting api rate limit
preview app can render only 3327 pages...

This is also interesting:
GET /issues/Issues_Ognian_test_2013-11-07_15_03_11.json 200 31ms - 4.85kb
GET /stylesheets/style.css 304 0ms
GET / 200 14ms - 586b
GET /stylesheets/style.css 304 1ms
GET /issues/Issues_joyent_node_2013-11-11_10_26_01.json 200 2343ms - 20.63mb
GET /stylesheets/style.css 304 3ms
GET /issues/Issues_joyent_node_2013-11-11_10_26_01.json 200 2128ms - 20.81mb
GET /issues/Issues_Ognian_test_2013-11-07_15_03_11.json 200 55ms - 4.91kb
GET /stylesheets/style.css 304 2ms
GET / 200 11ms - 586b

This means that the 5k pages are in the browser actually 20.81mb
and the file size of the json is 50mb
this means don't worry about async rendering, we are far far away from nodejs or other memory limits the bottleneck is THE BROWSER


lets try prince...
prince http://localhost:3001/issues/Issues_joyent_node_2013-11-11_10_26_01.json -o joyent_node.pdf

joyent_node.pdf -> 20,9MB
10.381 pages ... (due to font bigger size)
and indeed everything is rendered!! (with header and footer!!!)

for more dust helpers see:
http://linkedin.github.io/dustjs/test/test.html?q=helpers
and select the different templates...
@sep is a nice one... can help transform json the way it comes from mongodb to the correct json as array....

11.11.2013 ogi

formatting dates in dustjs:
im using my own helper now, but this could be better:

https://github.com/ElliotChong/dustjs-date-helpers
see
 http://sugarjs.com/dates
 http://sugarjs.com/date_formats

it doesn't provide a npm version and actually delegets everything to sugar.js so maybe we should just use sugar for that...

... TODO

see
http://zavoo.com/?p=356
this shows how to add markdown...


looks like this one
npm install markdown --save

is not so good and does not have github flavored markdown...

this looks better:
https://github.com/chjj/marked
npm install marked --save

13.11.2013 ogi